syntax = "proto3";

package pb;

import "dmworker.proto"; // refine if needed
import "google/api/annotations.proto";

service Master {
    rpc StartTask (StartTaskRequest) returns (StartTaskResponse) {
        option (google.api.http) = { 
            post: "/apis/v1alpha1/tasks"
            body: "*"
        };
    }

    rpc OperateTask (OperateTaskRequest) returns (OperateTaskResponse) {
        option (google.api.http) = { 
            put: "/apis/v1alpha1/tasks/{name}"
            body: "*"
        };
    }
    rpc UpdateTask (UpdateTaskRequest) returns (UpdateTaskResponse) {}

    rpc QueryStatus (QueryStatusListRequest) returns (QueryStatusListResponse) {
        option (google.api.http) = { 
            get: "/apis/v1alpha1/status/{name}"
        };
    }
    rpc QueryError (QueryErrorListRequest) returns (QueryErrorListResponse) {}

    // show un-resolved DDL locks
    rpc ShowDDLLocks (ShowDDLLocksRequest) returns (ShowDDLLocksResponse) {}
    // used by dmctl to manually unlock DDL lock
    rpc UnlockDDLLock (UnlockDDLLockRequest) returns (UnlockDDLLockResponse) {}

    rpc UpdateMasterConfig (UpdateMasterConfigRequest) returns (UpdateMasterConfigResponse) {}

    rpc UpdateWorkerRelayConfig(UpdateWorkerRelayConfigRequest) returns (CommonWorkerResponse) {}

    rpc HandleSQLs (HandleSQLsRequest) returns (HandleSQLsResponse) {}

    // SwitchWorkerRelayMaster requests some dm-workers to switch relay unit's master server
    rpc SwitchWorkerRelayMaster(SwitchWorkerRelayMasterRequest) returns (SwitchWorkerRelayMasterResponse) {}

    // OperateWorkerRelayTask requests some dm-workers to operate relay unit
    rpc OperateWorkerRelayTask (OperateWorkerRelayRequest) returns (OperateWorkerRelayResponse) {}

    // PurgeWorkerRelay purges relay log files for some dm-workers
    rpc PurgeWorkerRelay(PurgeWorkerRelayRequest) returns (PurgeWorkerRelayResponse) {}

    // MigrateRelay request migrate old dm-woker to a new one. 
    rpc MigrateWorkerRelay(MigrateWorkerRelayRequest) returns (CommonWorkerResponse) {}

    // CheckTask checks legality of task configuration
    rpc CheckTask(CheckTaskRequest) returns (CheckTaskResponse) {}

    // Operate an upstream MySQL source.
    rpc OperateSource(OperateSourceRequest) returns (OperateSourceResponse) {
        option (google.api.http) = {
            put: "/apis/v1alpha1/sources"
            body: "*"
        };
    }

    // RegisterWorker register the dm-workers.
    rpc RegisterWorker(RegisterWorkerRequest) returns(RegisterWorkerResponse) {}

    // OfflineWorker offline the dm-workers.
    rpc OfflineWorker(OfflineWorkerRequest) returns(OfflineWorkerResponse) {
        option (google.api.http) = {
            delete: "/apis/v1alpha1/workers/{name}"
        };
    }

    // ListMember list member information
    rpc ListMember(ListMemberRequest) returns(ListMemberResponse) {}
}

message MigrateWorkerRelayRequest {
    string BinlogName = 1;
    uint32 BinlogPos = 2;
    string source = 3;
}

message UpdateWorkerRelayConfigRequest {
    string config = 1;
    string source = 2;
}

message StartTaskRequest {
    string task = 1; // task's configuration, yaml format
    repeated string sources = 2; // mysql source need to do start task, empty for all matched workers in deployment
    bool removeMeta = 3; // whether to remove meta data for this task or not
}

message StartTaskResponse {
    bool result = 1;
    string msg = 2;
    repeated CommonWorkerResponse sources = 3;
}

message UpdateMasterConfigRequest {
    string config = 1;
}

message UpdateMasterConfigResponse {
    bool result = 1;
    string msg = 2;
    repeated QueryStatusResponse sources = 3;
}

message OperateTaskRequest {
    TaskOp op = 1; // Stop / Pause / Resume
    string name = 2; // task's name
    repeated string sources = 3; // sources need to do operation, empty for matched sources in processing the task
}

message OperateTaskResponse {
    TaskOp op = 1;
    bool result = 2;
    string msg = 3;
    repeated CommonWorkerResponse sources = 4;
}


// UpdateTaskRequest used to update task after it has beed started
// task: task's configuration, yaml format
//       now, only support to update config for routes, filters, column-mappings, black-white-list
//       support update partial config for syncer, loader, etc later
// sources need to do update, empty for all sources in processing the task
message UpdateTaskRequest {
    string task = 1;
    repeated string sources = 2;
}

message UpdateTaskResponse {
    bool result = 1;
    string msg = 2;
    repeated CommonWorkerResponse sources = 3;
}


message QueryStatusListRequest {
    string name = 1; // task's name, empty for all tasks
    repeated string sources = 2; // sources need to query, empty for all sources
}

message QueryStatusListResponse {
    bool result = 1;
    string msg = 2;
    repeated QueryStatusResponse sources = 3;
}

message QueryErrorListRequest {
    string name = 1;             // task's name, empty for all tasks
    repeated string sources = 2; // sources need to query, empty for all sources
}

message QueryErrorListResponse {
    bool result = 1;
    string msg = 2;
    repeated QueryErrorResponse sources = 3;
}

// ShowDDLLocksRequest used to query DDL locks which are un-resolved
// task: task's name, empty for all tasks
// sources: source need to query, empty for all sources
//          any DDL lock in which the source is synced or unsynced will return
// if specify task and sources both, and sources not doing the task , it will return empty DDL locks
message ShowDDLLocksRequest {
    string task = 1;
    repeated string sources = 2; // sources need to query, empty for all sources
}

// DDLLock represents a DDL lock info (I known the name confused with DDLLockInfo, any suggestion?)
// it been sent from dm-master to dmctl
// ID: DDL lock generated ID
// task: lock's corresponding task name
// mode: the shard DDL mode, `pessimistic` or `optimistic`.
// owner: lock's owner, a dm-worker
// DDL: DDL statement
// synced: already synced dm-workers
// unsynced: pending to sync dm-workers
message DDLLock {
    string ID = 1;
    string task = 2;
    string mode = 3;
    string owner = 4;
    repeated string DDLs = 5;
    repeated string synced = 6;
    repeated string unsynced = 7;
}

message ShowDDLLocksResponse {
    bool result = 1;
    string msg = 2;
    repeated DDLLock locks = 3; // all un-resolved DDL locks
}

// UnlockDDLLockRequest used to unlock (resolve) DDL lock manually
// ID: DDL lock ID
// replaceOwner: dm-worker used to replace the original DDL lock's owner
// forceRemove: force to remove the DDL lock even fail to execute the DDL for the owner.
message UnlockDDLLockRequest {
    string ID = 1;
    string replaceOwner = 2;
    bool forceRemove = 3;
}

message UnlockDDLLockResponse {
    bool result = 1;
    string msg = 2;
}

// SwitchWorkerRelayMasterRequest represents a request for some dm-workers to switch relay unit's master server
// workers: relay unit in these dm-workers need to switch master server
message SwitchWorkerRelayMasterRequest {
    repeated string sources = 1;
}

message SwitchWorkerRelayMasterResponse {
    bool result = 1;
    string msg = 2;
    repeated CommonWorkerResponse sources = 3;
}

// OperateWorkerRelayRequest represents a request for some dm-workers to operate relay unit
message OperateWorkerRelayRequest {
    RelayOp op = 1; // Stop / Pause / Resume
    repeated string sources = 2;
}

message OperateWorkerRelayResponse {
    RelayOp op = 1;
    bool result = 2;
    string msg = 3;
    repeated CommonWorkerResponse sources = 4;
}

message HandleSQLsRequest {
    string name = 1; // sub task's name
    SQLOp op = 2; // operation type
    repeated string args = 3; // args for operation
    string binlogPos = 4; // binlog-pos (that's file:pos format)
    string source = 5; // source
    string sqlPattern = 6; // sql-pattern (for regexp, starts with ~)
    bool sharding = 7; // whether are handing sharding DDL, which will only take effect on DDL lock's owner
}

message HandleSQLsResponse {
    bool result = 1;
    string msg = 2;
    repeated CommonWorkerResponse sources = 3;
}

// PurgeWorkerRelayRequest represents a request to purge relay log files for some dm-workers
// workers: dm-workers need to purge relay log files
// inactive: whether purge inactive relay log files
// time: whether purge relay log files before this time, the number of seconds elapsed since January 1, 1970 UTC
// filename: whether purge relay log files before this filename
// subDir: specify relay sub directory for @filename
message PurgeWorkerRelayRequest {
    repeated string sources = 1;
    bool inactive = 2;
    int64 time = 3;
    string filename = 4;
    string subDir = 5;
}

message PurgeWorkerRelayResponse {
    bool result = 1;
    string msg = 2;
    repeated CommonWorkerResponse sources = 3;
}

message CheckTaskRequest {
    string task = 1; // task's configuration, yaml format
}

message CheckTaskResponse {
    bool result = 1;
    string msg = 2;
}

enum SourceOp {
    InvalidSourceOp = 0;
    StartSource = 1;
    UpdateSource = 2;
    StopSource = 3;
}

message OperateSourceRequest {
    SourceOp op = 1;
    string config = 2;
}

message OperateSourceResponse {
    bool result = 1;
    string msg = 2;
    repeated CommonWorkerResponse sources = 3;
}

message RegisterWorkerRequest {
    string name = 1;
    string address = 2;
}

message RegisterWorkerResponse {
    bool result = 1;
    string msg = 2;
}

message OfflineWorkerRequest {
    string name = 1;
}

message OfflineWorkerResponse {
    bool result = 1;
    string msg = 2;
}

message MasterInfo {
    string name = 1;
    uint64 memberID = 2;
    bool alive = 3;
    repeated string peerURLs = 4;
    repeated string clientURLs = 5;
}

message WorkerInfo {
    string name = 1;
    string addr = 2;
    string stage = 3;
    string source = 4;
}

message ListLeaderMember {
    string msg = 1;
    string name = 2;
    string addr = 3;
}

message ListMasterMember {
    string msg = 1;
    repeated MasterInfo masters = 2;
}

message ListWorkerMember {
    string msg = 1;
    repeated WorkerInfo workers = 2;
}

message Members {
    oneof member {
        ListLeaderMember leader = 1;
        ListMasterMember master = 2;
        ListWorkerMember worker = 3;
    }
}

message ListMemberRequest {
    bool leader = 1;
    bool master = 2;
    bool worker = 3;
    repeated string names = 4;
}

message ListMemberResponse {
    bool result = 1;
    string msg = 2;
    repeated Members members = 3;
}