// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.2 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// get doc json
	// (GET /api/v1/dm.json)
	GetDocJSON(ctx echo.Context) error
	// get doc html
	// (GET /api/v1/docs)
	GetDocHTML(ctx echo.Context) error
	// get data source list
	// (GET /api/v1/sources)
	DMAPIGetSourceList(ctx echo.Context) error
	// create new data source
	// (POST /api/v1/sources)
	DMAPICreateSource(ctx echo.Context) error
	// delete a data source
	// (DELETE /api/v1/sources/{source-name})
	DMAPIDeleteSource(ctx echo.Context, sourceName string) error
	// enable relay log function for the data source
	// (PATCH /api/v1/sources/{source-name}/start-relay)
	DMAPIStartRelay(ctx echo.Context, sourceName string) error
	// get the current status of the data source
	// (GET /api/v1/sources/{source-name}/status)
	DMAPIGetSourceStatus(ctx echo.Context, sourceName string) error
	// disable relay log function for the data source
	// (PATCH /api/v1/sources/{source-name}/stop-relay)
	DMAPIStopRelay(ctx echo.Context, sourceName string) error
	// get task list
	// (GET /api/v1/tasks)
	DMAPIGetTaskList(ctx echo.Context) error
	// create and start task
	// (POST /api/v1/tasks)
	DMAPIStartTask(ctx echo.Context) error
	// delete and stop task
	// (DELETE /api/v1/tasks/{task-name})
	DMAPIDeleteTask(ctx echo.Context, taskName string) error
	// get task status
	// (GET /api/v1/tasks/{task-name}/status)
	DMAPIGetTaskStatus(ctx echo.Context, taskName string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetDocJSON converts echo context to params.
func (w *ServerInterfaceWrapper) GetDocJSON(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDocJSON(ctx)
	return err
}

// GetDocHTML converts echo context to params.
func (w *ServerInterfaceWrapper) GetDocHTML(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDocHTML(ctx)
	return err
}

// DMAPIGetSourceList converts echo context to params.
func (w *ServerInterfaceWrapper) DMAPIGetSourceList(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DMAPIGetSourceList(ctx)
	return err
}

// DMAPICreateSource converts echo context to params.
func (w *ServerInterfaceWrapper) DMAPICreateSource(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DMAPICreateSource(ctx)
	return err
}

// DMAPIDeleteSource converts echo context to params.
func (w *ServerInterfaceWrapper) DMAPIDeleteSource(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "source-name" -------------
	var sourceName string

	err = runtime.BindStyledParameterWithLocation("simple", false, "source-name", runtime.ParamLocationPath, ctx.Param("source-name"), &sourceName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter source-name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DMAPIDeleteSource(ctx, sourceName)
	return err
}

// DMAPIStartRelay converts echo context to params.
func (w *ServerInterfaceWrapper) DMAPIStartRelay(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "source-name" -------------
	var sourceName string

	err = runtime.BindStyledParameterWithLocation("simple", false, "source-name", runtime.ParamLocationPath, ctx.Param("source-name"), &sourceName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter source-name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DMAPIStartRelay(ctx, sourceName)
	return err
}

// DMAPIGetSourceStatus converts echo context to params.
func (w *ServerInterfaceWrapper) DMAPIGetSourceStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "source-name" -------------
	var sourceName string

	err = runtime.BindStyledParameterWithLocation("simple", false, "source-name", runtime.ParamLocationPath, ctx.Param("source-name"), &sourceName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter source-name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DMAPIGetSourceStatus(ctx, sourceName)
	return err
}

// DMAPIStopRelay converts echo context to params.
func (w *ServerInterfaceWrapper) DMAPIStopRelay(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "source-name" -------------
	var sourceName string

	err = runtime.BindStyledParameterWithLocation("simple", false, "source-name", runtime.ParamLocationPath, ctx.Param("source-name"), &sourceName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter source-name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DMAPIStopRelay(ctx, sourceName)
	return err
}

// DMAPIGetTaskList converts echo context to params.
func (w *ServerInterfaceWrapper) DMAPIGetTaskList(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DMAPIGetTaskList(ctx)
	return err
}

// DMAPIStartTask converts echo context to params.
func (w *ServerInterfaceWrapper) DMAPIStartTask(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DMAPIStartTask(ctx)
	return err
}

// DMAPIDeleteTask converts echo context to params.
func (w *ServerInterfaceWrapper) DMAPIDeleteTask(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "task-name" -------------
	var taskName string

	err = runtime.BindStyledParameterWithLocation("simple", false, "task-name", runtime.ParamLocationPath, ctx.Param("task-name"), &taskName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter task-name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DMAPIDeleteTask(ctx, taskName)
	return err
}

// DMAPIGetTaskStatus converts echo context to params.
func (w *ServerInterfaceWrapper) DMAPIGetTaskStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "task-name" -------------
	var taskName string

	err = runtime.BindStyledParameterWithLocation("simple", false, "task-name", runtime.ParamLocationPath, ctx.Param("task-name"), &taskName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter task-name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DMAPIGetTaskStatus(ctx, taskName)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {
	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/api/v1/dm.json", wrapper.GetDocJSON)
	router.GET(baseURL+"/api/v1/docs", wrapper.GetDocHTML)
	router.GET(baseURL+"/api/v1/sources", wrapper.DMAPIGetSourceList)
	router.POST(baseURL+"/api/v1/sources", wrapper.DMAPICreateSource)
	router.DELETE(baseURL+"/api/v1/sources/:source-name", wrapper.DMAPIDeleteSource)
	router.PATCH(baseURL+"/api/v1/sources/:source-name/start-relay", wrapper.DMAPIStartRelay)
	router.GET(baseURL+"/api/v1/sources/:source-name/status", wrapper.DMAPIGetSourceStatus)
	router.PATCH(baseURL+"/api/v1/sources/:source-name/stop-relay", wrapper.DMAPIStopRelay)
	router.GET(baseURL+"/api/v1/tasks", wrapper.DMAPIGetTaskList)
	router.POST(baseURL+"/api/v1/tasks", wrapper.DMAPIStartTask)
	router.DELETE(baseURL+"/api/v1/tasks/:task-name", wrapper.DMAPIDeleteTask)
	router.GET(baseURL+"/api/v1/tasks/:task-name/status", wrapper.DMAPIGetTaskStatus)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
