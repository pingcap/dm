// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.2 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// get data source list
	// (GET /api/v1/sources)
	DMAPIGetSourceList(ctx echo.Context) error
	// create new data source
	// (POST /api/v1/sources)
	DMAPICreateSource(ctx echo.Context) error
	// delete a data source
	// (DELETE /api/v1/sources/{source-name})
	DMAPIDeleteSource(ctx echo.Context, sourceName string) error
	// enable relay log function for the data source
	// (PATCH /api/v1/sources/{source-name}/start-relay)
	DMAPIStartRelay(ctx echo.Context, sourceName string) error
	// get the current status of the data source
	// (GET /api/v1/sources/{source-name}/status)
	DMAPIGetSourceStatus(ctx echo.Context, sourceName string) error
	// disable relay log function for the data source
	// (PATCH /api/v1/sources/{source-name}/stop-relay)
	DMAPIStopRelay(ctx echo.Context, sourceName string) error
	// get task list
	// (GET /api/v1/tasks)
	DMAPIGetTaskList(ctx echo.Context) error
	// create and start task
	// (POST /api/v1/tasks)
	DMAPIStartTask(ctx echo.Context) error
	// delete and stop task
	// (DELETE /api/v1/tasks/{task-name})
	DMAPIDeleteTask(ctx echo.Context, taskName string) error
	// get task status
	// (GET /api/v1/tasks/{task-name}/status)
	DMAPIGetTaskStatus(ctx echo.Context, taskName string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// DMAPIGetSourceList converts echo context to params.
func (w *ServerInterfaceWrapper) DMAPIGetSourceList(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DMAPIGetSourceList(ctx)
	return err
}

// DMAPICreateSource converts echo context to params.
func (w *ServerInterfaceWrapper) DMAPICreateSource(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DMAPICreateSource(ctx)
	return err
}

// DMAPIDeleteSource converts echo context to params.
func (w *ServerInterfaceWrapper) DMAPIDeleteSource(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "source-name" -------------
	var sourceName string

	err = runtime.BindStyledParameterWithLocation("simple", false, "source-name", runtime.ParamLocationPath, ctx.Param("source-name"), &sourceName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter source-name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DMAPIDeleteSource(ctx, sourceName)
	return err
}

// DMAPIStartRelay converts echo context to params.
func (w *ServerInterfaceWrapper) DMAPIStartRelay(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "source-name" -------------
	var sourceName string

	err = runtime.BindStyledParameterWithLocation("simple", false, "source-name", runtime.ParamLocationPath, ctx.Param("source-name"), &sourceName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter source-name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DMAPIStartRelay(ctx, sourceName)
	return err
}

// DMAPIGetSourceStatus converts echo context to params.
func (w *ServerInterfaceWrapper) DMAPIGetSourceStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "source-name" -------------
	var sourceName string

	err = runtime.BindStyledParameterWithLocation("simple", false, "source-name", runtime.ParamLocationPath, ctx.Param("source-name"), &sourceName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter source-name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DMAPIGetSourceStatus(ctx, sourceName)
	return err
}

// DMAPIStopRelay converts echo context to params.
func (w *ServerInterfaceWrapper) DMAPIStopRelay(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "source-name" -------------
	var sourceName string

	err = runtime.BindStyledParameterWithLocation("simple", false, "source-name", runtime.ParamLocationPath, ctx.Param("source-name"), &sourceName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter source-name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DMAPIStopRelay(ctx, sourceName)
	return err
}

// DMAPIGetTaskList converts echo context to params.
func (w *ServerInterfaceWrapper) DMAPIGetTaskList(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DMAPIGetTaskList(ctx)
	return err
}

// DMAPIStartTask converts echo context to params.
func (w *ServerInterfaceWrapper) DMAPIStartTask(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DMAPIStartTask(ctx)
	return err
}

// DMAPIDeleteTask converts echo context to params.
func (w *ServerInterfaceWrapper) DMAPIDeleteTask(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "task-name" -------------
	var taskName string

	err = runtime.BindStyledParameterWithLocation("simple", false, "task-name", runtime.ParamLocationPath, ctx.Param("task-name"), &taskName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter task-name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DMAPIDeleteTask(ctx, taskName)
	return err
}

// DMAPIGetTaskStatus converts echo context to params.
func (w *ServerInterfaceWrapper) DMAPIGetTaskStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "task-name" -------------
	var taskName string

	err = runtime.BindStyledParameterWithLocation("simple", false, "task-name", runtime.ParamLocationPath, ctx.Param("task-name"), &taskName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter task-name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DMAPIGetTaskStatus(ctx, taskName)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {
	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/api/v1/sources", wrapper.DMAPIGetSourceList)
	router.POST(baseURL+"/api/v1/sources", wrapper.DMAPICreateSource)
	router.DELETE(baseURL+"/api/v1/sources/:source-name", wrapper.DMAPIDeleteSource)
	router.PATCH(baseURL+"/api/v1/sources/:source-name/start-relay", wrapper.DMAPIStartRelay)
	router.GET(baseURL+"/api/v1/sources/:source-name/status", wrapper.DMAPIGetSourceStatus)
	router.PATCH(baseURL+"/api/v1/sources/:source-name/stop-relay", wrapper.DMAPIStopRelay)
	router.GET(baseURL+"/api/v1/tasks", wrapper.DMAPIGetTaskList)
	router.POST(baseURL+"/api/v1/tasks", wrapper.DMAPIStartTask)
	router.DELETE(baseURL+"/api/v1/tasks/:task-name", wrapper.DMAPIDeleteTask)
	router.GET(baseURL+"/api/v1/tasks/:task-name/status", wrapper.DMAPIGetTaskStatus)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"RAAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
