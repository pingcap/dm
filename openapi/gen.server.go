// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.2 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// get doc json
	// (GET /api/v1/dm.json)
	GetDocJSON(ctx echo.Context) error
	// get doc html
	// (GET /api/v1/docs)
	GetDocHTML(ctx echo.Context) error
	// get data source list
	// (GET /api/v1/sources)
	DMAPIGetSourceList(ctx echo.Context) error
	// create new data source
	// (POST /api/v1/sources)
	DMAPICreateSource(ctx echo.Context) error
	// delete a data source
	// (DELETE /api/v1/sources/{source-name})
	DMAPIDeleteSource(ctx echo.Context, sourceName string) error
	// enable relay log function for the data source
	// (PATCH /api/v1/sources/{source-name}/start-relay)
	DMAPIStartRelay(ctx echo.Context, sourceName string) error
	// get the current status of the data source
	// (GET /api/v1/sources/{source-name}/status)
	DMAPIGetSourceStatus(ctx echo.Context, sourceName string) error
	// disable relay log function for the data source
	// (PATCH /api/v1/sources/{source-name}/stop-relay)
	DMAPIStopRelay(ctx echo.Context, sourceName string) error
	// get task list
	// (GET /api/v1/tasks)
	DMAPIGetTaskList(ctx echo.Context) error
	// create and start task
	// (POST /api/v1/tasks)
	DMAPIStartTask(ctx echo.Context) error
	// delete and stop task
	// (DELETE /api/v1/tasks/{task-name})
	DMAPIDeleteTask(ctx echo.Context, taskName string) error
	// get task status
	// (GET /api/v1/tasks/{task-name}/status)
	DMAPIGetTaskStatus(ctx echo.Context, taskName string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetDocJSON converts echo context to params.
func (w *ServerInterfaceWrapper) GetDocJSON(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDocJSON(ctx)
	return err
}

// GetDocHTML converts echo context to params.
func (w *ServerInterfaceWrapper) GetDocHTML(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDocHTML(ctx)
	return err
}

// DMAPIGetSourceList converts echo context to params.
func (w *ServerInterfaceWrapper) DMAPIGetSourceList(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DMAPIGetSourceList(ctx)
	return err
}

// DMAPICreateSource converts echo context to params.
func (w *ServerInterfaceWrapper) DMAPICreateSource(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DMAPICreateSource(ctx)
	return err
}

// DMAPIDeleteSource converts echo context to params.
func (w *ServerInterfaceWrapper) DMAPIDeleteSource(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "source-name" -------------
	var sourceName string

	err = runtime.BindStyledParameterWithLocation("simple", false, "source-name", runtime.ParamLocationPath, ctx.Param("source-name"), &sourceName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter source-name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DMAPIDeleteSource(ctx, sourceName)
	return err
}

// DMAPIStartRelay converts echo context to params.
func (w *ServerInterfaceWrapper) DMAPIStartRelay(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "source-name" -------------
	var sourceName string

	err = runtime.BindStyledParameterWithLocation("simple", false, "source-name", runtime.ParamLocationPath, ctx.Param("source-name"), &sourceName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter source-name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DMAPIStartRelay(ctx, sourceName)
	return err
}

// DMAPIGetSourceStatus converts echo context to params.
func (w *ServerInterfaceWrapper) DMAPIGetSourceStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "source-name" -------------
	var sourceName string

	err = runtime.BindStyledParameterWithLocation("simple", false, "source-name", runtime.ParamLocationPath, ctx.Param("source-name"), &sourceName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter source-name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DMAPIGetSourceStatus(ctx, sourceName)
	return err
}

// DMAPIStopRelay converts echo context to params.
func (w *ServerInterfaceWrapper) DMAPIStopRelay(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "source-name" -------------
	var sourceName string

	err = runtime.BindStyledParameterWithLocation("simple", false, "source-name", runtime.ParamLocationPath, ctx.Param("source-name"), &sourceName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter source-name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DMAPIStopRelay(ctx, sourceName)
	return err
}

// DMAPIGetTaskList converts echo context to params.
func (w *ServerInterfaceWrapper) DMAPIGetTaskList(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DMAPIGetTaskList(ctx)
	return err
}

// DMAPIStartTask converts echo context to params.
func (w *ServerInterfaceWrapper) DMAPIStartTask(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DMAPIStartTask(ctx)
	return err
}

// DMAPIDeleteTask converts echo context to params.
func (w *ServerInterfaceWrapper) DMAPIDeleteTask(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "task-name" -------------
	var taskName string

	err = runtime.BindStyledParameterWithLocation("simple", false, "task-name", runtime.ParamLocationPath, ctx.Param("task-name"), &taskName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter task-name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DMAPIDeleteTask(ctx, taskName)
	return err
}

// DMAPIGetTaskStatus converts echo context to params.
func (w *ServerInterfaceWrapper) DMAPIGetTaskStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "task-name" -------------
	var taskName string

	err = runtime.BindStyledParameterWithLocation("simple", false, "task-name", runtime.ParamLocationPath, ctx.Param("task-name"), &taskName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter task-name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DMAPIGetTaskStatus(ctx, taskName)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {
	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/api/v1/dm.json", wrapper.GetDocJSON)
	router.GET(baseURL+"/api/v1/docs", wrapper.GetDocHTML)
	router.GET(baseURL+"/api/v1/sources", wrapper.DMAPIGetSourceList)
	router.POST(baseURL+"/api/v1/sources", wrapper.DMAPICreateSource)
	router.DELETE(baseURL+"/api/v1/sources/:source-name", wrapper.DMAPIDeleteSource)
	router.PATCH(baseURL+"/api/v1/sources/:source-name/start-relay", wrapper.DMAPIStartRelay)
	router.GET(baseURL+"/api/v1/sources/:source-name/status", wrapper.DMAPIGetSourceStatus)
	router.PATCH(baseURL+"/api/v1/sources/:source-name/stop-relay", wrapper.DMAPIStopRelay)
	router.GET(baseURL+"/api/v1/tasks", wrapper.DMAPIGetTaskList)
	router.POST(baseURL+"/api/v1/tasks", wrapper.DMAPIStartTask)
	router.DELETE(baseURL+"/api/v1/tasks/:task-name", wrapper.DMAPIDeleteTask)
	router.GET(baseURL+"/api/v1/tasks/:task-name/status", wrapper.DMAPIGetTaskStatus)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
