// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.2 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// get doc json
	// (GET /api/v1/dm.json)
	GetDocJSON(ctx echo.Context) error
	// get doc html
	// (GET /api/v1/docs)
	GetDocHTML(ctx echo.Context) error
	// get data source list
	// (GET /api/v1/sources)
	DMAPIGetSourceList(ctx echo.Context) error
	// create new data source
	// (POST /api/v1/sources)
	DMAPICreateSource(ctx echo.Context) error
	// delete a data source
	// (DELETE /api/v1/sources/{source-name})
	DMAPIDeleteSource(ctx echo.Context, sourceName string) error
	// enable relay log function for the data source
	// (PATCH /api/v1/sources/{source-name}/start-relay)
	DMAPIStartRelay(ctx echo.Context, sourceName string) error
	// get the current status of the data source
	// (GET /api/v1/sources/{source-name}/status)
	DMAPIGetSourceStatus(ctx echo.Context, sourceName string) error
	// disable relay log function for the data source
	// (PATCH /api/v1/sources/{source-name}/stop-relay)
	DMAPIStopRelay(ctx echo.Context, sourceName string) error
	// get task list
	// (GET /api/v1/tasks)
	DMAPIGetTaskList(ctx echo.Context) error
	// create and start task
	// (POST /api/v1/tasks)
	DMAPIStartTask(ctx echo.Context) error
	// delete and stop task
	// (DELETE /api/v1/tasks/{task-name})
	DMAPIDeleteTask(ctx echo.Context, taskName string) error
	// get task status
	// (GET /api/v1/tasks/{task-name}/status)
	DMAPIGetTaskStatus(ctx echo.Context, taskName string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetDocJSON converts echo context to params.
func (w *ServerInterfaceWrapper) GetDocJSON(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDocJSON(ctx)
	return err
}

// GetDocHTML converts echo context to params.
func (w *ServerInterfaceWrapper) GetDocHTML(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDocHTML(ctx)
	return err
}

// DMAPIGetSourceList converts echo context to params.
func (w *ServerInterfaceWrapper) DMAPIGetSourceList(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DMAPIGetSourceList(ctx)
	return err
}

// DMAPICreateSource converts echo context to params.
func (w *ServerInterfaceWrapper) DMAPICreateSource(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DMAPICreateSource(ctx)
	return err
}

// DMAPIDeleteSource converts echo context to params.
func (w *ServerInterfaceWrapper) DMAPIDeleteSource(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "source-name" -------------
	var sourceName string

	err = runtime.BindStyledParameterWithLocation("simple", false, "source-name", runtime.ParamLocationPath, ctx.Param("source-name"), &sourceName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter source-name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DMAPIDeleteSource(ctx, sourceName)
	return err
}

// DMAPIStartRelay converts echo context to params.
func (w *ServerInterfaceWrapper) DMAPIStartRelay(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "source-name" -------------
	var sourceName string

	err = runtime.BindStyledParameterWithLocation("simple", false, "source-name", runtime.ParamLocationPath, ctx.Param("source-name"), &sourceName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter source-name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DMAPIStartRelay(ctx, sourceName)
	return err
}

// DMAPIGetSourceStatus converts echo context to params.
func (w *ServerInterfaceWrapper) DMAPIGetSourceStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "source-name" -------------
	var sourceName string

	err = runtime.BindStyledParameterWithLocation("simple", false, "source-name", runtime.ParamLocationPath, ctx.Param("source-name"), &sourceName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter source-name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DMAPIGetSourceStatus(ctx, sourceName)
	return err
}

// DMAPIStopRelay converts echo context to params.
func (w *ServerInterfaceWrapper) DMAPIStopRelay(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "source-name" -------------
	var sourceName string

	err = runtime.BindStyledParameterWithLocation("simple", false, "source-name", runtime.ParamLocationPath, ctx.Param("source-name"), &sourceName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter source-name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DMAPIStopRelay(ctx, sourceName)
	return err
}

// DMAPIGetTaskList converts echo context to params.
func (w *ServerInterfaceWrapper) DMAPIGetTaskList(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DMAPIGetTaskList(ctx)
	return err
}

// DMAPIStartTask converts echo context to params.
func (w *ServerInterfaceWrapper) DMAPIStartTask(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DMAPIStartTask(ctx)
	return err
}

// DMAPIDeleteTask converts echo context to params.
func (w *ServerInterfaceWrapper) DMAPIDeleteTask(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "task-name" -------------
	var taskName string

	err = runtime.BindStyledParameterWithLocation("simple", false, "task-name", runtime.ParamLocationPath, ctx.Param("task-name"), &taskName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter task-name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DMAPIDeleteTask(ctx, taskName)
	return err
}

// DMAPIGetTaskStatus converts echo context to params.
func (w *ServerInterfaceWrapper) DMAPIGetTaskStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "task-name" -------------
	var taskName string

	err = runtime.BindStyledParameterWithLocation("simple", false, "task-name", runtime.ParamLocationPath, ctx.Param("task-name"), &taskName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter task-name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DMAPIGetTaskStatus(ctx, taskName)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {
	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/api/v1/dm.json", wrapper.GetDocJSON)
	router.GET(baseURL+"/api/v1/docs", wrapper.GetDocHTML)
	router.GET(baseURL+"/api/v1/sources", wrapper.DMAPIGetSourceList)
	router.POST(baseURL+"/api/v1/sources", wrapper.DMAPICreateSource)
	router.DELETE(baseURL+"/api/v1/sources/:source-name", wrapper.DMAPIDeleteSource)
	router.PATCH(baseURL+"/api/v1/sources/:source-name/start-relay", wrapper.DMAPIStartRelay)
	router.GET(baseURL+"/api/v1/sources/:source-name/status", wrapper.DMAPIGetSourceStatus)
	router.PATCH(baseURL+"/api/v1/sources/:source-name/stop-relay", wrapper.DMAPIStopRelay)
	router.GET(baseURL+"/api/v1/tasks", wrapper.DMAPIGetTaskList)
	router.POST(baseURL+"/api/v1/tasks", wrapper.DMAPIStartTask)
	router.DELETE(baseURL+"/api/v1/tasks/:task-name", wrapper.DMAPIDeleteTask)
	router.GET(baseURL+"/api/v1/tasks/:task-name/status", wrapper.DMAPIGetTaskStatus)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
