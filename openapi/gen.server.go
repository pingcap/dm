// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.2 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// get doc json
	// (GET /api/v1/dm.json)
	GetDocJSON(ctx echo.Context) error
	// get doc html
	// (GET /api/v1/docs)
	GetDocHTML(ctx echo.Context) error
	// get data source list
	// (GET /api/v1/sources)
	DMAPIGetSourceList(ctx echo.Context) error
	// create new data source
	// (POST /api/v1/sources)
	DMAPICreateSource(ctx echo.Context) error
	// delete a data source
	// (DELETE /api/v1/sources/{source-name})
	DMAPIDeleteSource(ctx echo.Context, sourceName string) error
	// enable relay log function for the data source
	// (PATCH /api/v1/sources/{source-name}/start-relay)
	DMAPIStartRelay(ctx echo.Context, sourceName string) error
	// get the current status of the data source
	// (GET /api/v1/sources/{source-name}/status)
	DMAPIGetSourceStatus(ctx echo.Context, sourceName string) error
	// disable relay log function for the data source
	// (PATCH /api/v1/sources/{source-name}/stop-relay)
	DMAPIStopRelay(ctx echo.Context, sourceName string) error
	// get task list
	// (GET /api/v1/tasks)
	DMAPIGetTaskList(ctx echo.Context) error
	// create and start task
	// (POST /api/v1/tasks)
	DMAPIStartTask(ctx echo.Context) error
	// delete and stop task
	// (DELETE /api/v1/tasks/{task-name})
	DMAPIDeleteTask(ctx echo.Context, taskName string) error
	// get task status
	// (GET /api/v1/tasks/{task-name}/status)
	DMAPIGetTaskStatus(ctx echo.Context, taskName string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetDocJSON converts echo context to params.
func (w *ServerInterfaceWrapper) GetDocJSON(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDocJSON(ctx)
	return err
}

// GetDocHTML converts echo context to params.
func (w *ServerInterfaceWrapper) GetDocHTML(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDocHTML(ctx)
	return err
}

// DMAPIGetSourceList converts echo context to params.
func (w *ServerInterfaceWrapper) DMAPIGetSourceList(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DMAPIGetSourceList(ctx)
	return err
}

// DMAPICreateSource converts echo context to params.
func (w *ServerInterfaceWrapper) DMAPICreateSource(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DMAPICreateSource(ctx)
	return err
}

// DMAPIDeleteSource converts echo context to params.
func (w *ServerInterfaceWrapper) DMAPIDeleteSource(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "source-name" -------------
	var sourceName string

	err = runtime.BindStyledParameterWithLocation("simple", false, "source-name", runtime.ParamLocationPath, ctx.Param("source-name"), &sourceName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter source-name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DMAPIDeleteSource(ctx, sourceName)
	return err
}

// DMAPIStartRelay converts echo context to params.
func (w *ServerInterfaceWrapper) DMAPIStartRelay(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "source-name" -------------
	var sourceName string

	err = runtime.BindStyledParameterWithLocation("simple", false, "source-name", runtime.ParamLocationPath, ctx.Param("source-name"), &sourceName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter source-name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DMAPIStartRelay(ctx, sourceName)
	return err
}

// DMAPIGetSourceStatus converts echo context to params.
func (w *ServerInterfaceWrapper) DMAPIGetSourceStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "source-name" -------------
	var sourceName string

	err = runtime.BindStyledParameterWithLocation("simple", false, "source-name", runtime.ParamLocationPath, ctx.Param("source-name"), &sourceName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter source-name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DMAPIGetSourceStatus(ctx, sourceName)
	return err
}

// DMAPIStopRelay converts echo context to params.
func (w *ServerInterfaceWrapper) DMAPIStopRelay(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "source-name" -------------
	var sourceName string

	err = runtime.BindStyledParameterWithLocation("simple", false, "source-name", runtime.ParamLocationPath, ctx.Param("source-name"), &sourceName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter source-name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DMAPIStopRelay(ctx, sourceName)
	return err
}

// DMAPIGetTaskList converts echo context to params.
func (w *ServerInterfaceWrapper) DMAPIGetTaskList(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DMAPIGetTaskList(ctx)
	return err
}

// DMAPIStartTask converts echo context to params.
func (w *ServerInterfaceWrapper) DMAPIStartTask(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DMAPIStartTask(ctx)
	return err
}

// DMAPIDeleteTask converts echo context to params.
func (w *ServerInterfaceWrapper) DMAPIDeleteTask(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "task-name" -------------
	var taskName string

	err = runtime.BindStyledParameterWithLocation("simple", false, "task-name", runtime.ParamLocationPath, ctx.Param("task-name"), &taskName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter task-name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DMAPIDeleteTask(ctx, taskName)
	return err
}

// DMAPIGetTaskStatus converts echo context to params.
func (w *ServerInterfaceWrapper) DMAPIGetTaskStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "task-name" -------------
	var taskName string

	err = runtime.BindStyledParameterWithLocation("simple", false, "task-name", runtime.ParamLocationPath, ctx.Param("task-name"), &taskName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter task-name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DMAPIGetTaskStatus(ctx, taskName)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {
	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/api/v1/dm.json", wrapper.GetDocJSON)
	router.GET(baseURL+"/api/v1/docs", wrapper.GetDocHTML)
	router.GET(baseURL+"/api/v1/sources", wrapper.DMAPIGetSourceList)
	router.POST(baseURL+"/api/v1/sources", wrapper.DMAPICreateSource)
	router.DELETE(baseURL+"/api/v1/sources/:source-name", wrapper.DMAPIDeleteSource)
	router.PATCH(baseURL+"/api/v1/sources/:source-name/start-relay", wrapper.DMAPIStartRelay)
	router.GET(baseURL+"/api/v1/sources/:source-name/status", wrapper.DMAPIGetSourceStatus)
	router.PATCH(baseURL+"/api/v1/sources/:source-name/stop-relay", wrapper.DMAPIStopRelay)
	router.GET(baseURL+"/api/v1/tasks", wrapper.DMAPIGetTaskList)
	router.POST(baseURL+"/api/v1/tasks", wrapper.DMAPIStartTask)
	router.DELETE(baseURL+"/api/v1/tasks/:task-name", wrapper.DMAPIDeleteTask)
	router.GET(baseURL+"/api/v1/tasks/:task-name/status", wrapper.DMAPIGetTaskStatus)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
