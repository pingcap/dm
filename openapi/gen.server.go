// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.2 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// get doc json
	// (GET /api/v1/dm.json)
	GetDocJSON(ctx echo.Context) error
	// get doc html
	// (GET /api/v1/docs)
	GetDocHTML(ctx echo.Context) error
	// get data source list
	// (GET /api/v1/sources)
	DMAPIGetSourceList(ctx echo.Context) error
	// create new data source
	// (POST /api/v1/sources)
	DMAPICreateSource(ctx echo.Context) error
	// delete a data source
	// (DELETE /api/v1/sources/{source-name})
	DMAPIDeleteSource(ctx echo.Context, sourceName string) error
	// enable relay log function for the data source
	// (PATCH /api/v1/sources/{source-name}/start-relay)
	DMAPIStartRelay(ctx echo.Context, sourceName string) error
	// get the current status of the data source
	// (GET /api/v1/sources/{source-name}/status)
	DMAPIGetSourceStatus(ctx echo.Context, sourceName string) error
	// disable relay log function for the data source
	// (PATCH /api/v1/sources/{source-name}/stop-relay)
	DMAPIStopRelay(ctx echo.Context, sourceName string) error
	// get task list
	// (GET /api/v1/tasks)
	DMAPIGetTaskList(ctx echo.Context) error
	// create and start task
	// (POST /api/v1/tasks)
	DMAPIStartTask(ctx echo.Context) error
	// delete and stop task
	// (DELETE /api/v1/tasks/{task-name})
	DMAPIDeleteTask(ctx echo.Context, taskName string) error
	// get task status
	// (GET /api/v1/tasks/{task-name}/status)
	DMAPIGetTaskStatus(ctx echo.Context, taskName string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetDocJSON converts echo context to params.
func (w *ServerInterfaceWrapper) GetDocJSON(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDocJSON(ctx)
	return err
}

// GetDocHTML converts echo context to params.
func (w *ServerInterfaceWrapper) GetDocHTML(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDocHTML(ctx)
	return err
}

// DMAPIGetSourceList converts echo context to params.
func (w *ServerInterfaceWrapper) DMAPIGetSourceList(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DMAPIGetSourceList(ctx)
	return err
}

// DMAPICreateSource converts echo context to params.
func (w *ServerInterfaceWrapper) DMAPICreateSource(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DMAPICreateSource(ctx)
	return err
}

// DMAPIDeleteSource converts echo context to params.
func (w *ServerInterfaceWrapper) DMAPIDeleteSource(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "source-name" -------------
	var sourceName string

	err = runtime.BindStyledParameterWithLocation("simple", false, "source-name", runtime.ParamLocationPath, ctx.Param("source-name"), &sourceName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter source-name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DMAPIDeleteSource(ctx, sourceName)
	return err
}

// DMAPIStartRelay converts echo context to params.
func (w *ServerInterfaceWrapper) DMAPIStartRelay(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "source-name" -------------
	var sourceName string

	err = runtime.BindStyledParameterWithLocation("simple", false, "source-name", runtime.ParamLocationPath, ctx.Param("source-name"), &sourceName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter source-name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DMAPIStartRelay(ctx, sourceName)
	return err
}

// DMAPIGetSourceStatus converts echo context to params.
func (w *ServerInterfaceWrapper) DMAPIGetSourceStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "source-name" -------------
	var sourceName string

	err = runtime.BindStyledParameterWithLocation("simple", false, "source-name", runtime.ParamLocationPath, ctx.Param("source-name"), &sourceName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter source-name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DMAPIGetSourceStatus(ctx, sourceName)
	return err
}

// DMAPIStopRelay converts echo context to params.
func (w *ServerInterfaceWrapper) DMAPIStopRelay(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "source-name" -------------
	var sourceName string

	err = runtime.BindStyledParameterWithLocation("simple", false, "source-name", runtime.ParamLocationPath, ctx.Param("source-name"), &sourceName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter source-name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DMAPIStopRelay(ctx, sourceName)
	return err
}

// DMAPIGetTaskList converts echo context to params.
func (w *ServerInterfaceWrapper) DMAPIGetTaskList(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DMAPIGetTaskList(ctx)
	return err
}

// DMAPIStartTask converts echo context to params.
func (w *ServerInterfaceWrapper) DMAPIStartTask(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DMAPIStartTask(ctx)
	return err
}

// DMAPIDeleteTask converts echo context to params.
func (w *ServerInterfaceWrapper) DMAPIDeleteTask(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "task-name" -------------
	var taskName string

	err = runtime.BindStyledParameterWithLocation("simple", false, "task-name", runtime.ParamLocationPath, ctx.Param("task-name"), &taskName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter task-name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DMAPIDeleteTask(ctx, taskName)
	return err
}

// DMAPIGetTaskStatus converts echo context to params.
func (w *ServerInterfaceWrapper) DMAPIGetTaskStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "task-name" -------------
	var taskName string

	err = runtime.BindStyledParameterWithLocation("simple", false, "task-name", runtime.ParamLocationPath, ctx.Param("task-name"), &taskName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter task-name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DMAPIGetTaskStatus(ctx, taskName)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {
	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/api/v1/dm.json", wrapper.GetDocJSON)
	router.GET(baseURL+"/api/v1/docs", wrapper.GetDocHTML)
	router.GET(baseURL+"/api/v1/sources", wrapper.DMAPIGetSourceList)
	router.POST(baseURL+"/api/v1/sources", wrapper.DMAPICreateSource)
	router.DELETE(baseURL+"/api/v1/sources/:source-name", wrapper.DMAPIDeleteSource)
	router.PATCH(baseURL+"/api/v1/sources/:source-name/start-relay", wrapper.DMAPIStartRelay)
	router.GET(baseURL+"/api/v1/sources/:source-name/status", wrapper.DMAPIGetSourceStatus)
	router.PATCH(baseURL+"/api/v1/sources/:source-name/stop-relay", wrapper.DMAPIStopRelay)
	router.GET(baseURL+"/api/v1/tasks", wrapper.DMAPIGetTaskList)
	router.POST(baseURL+"/api/v1/tasks", wrapper.DMAPIStartTask)
	router.DELETE(baseURL+"/api/v1/tasks/:task-name", wrapper.DMAPIDeleteTask)
	router.GET(baseURL+"/api/v1/tasks/:task-name/status", wrapper.DMAPIGetTaskStatus)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
